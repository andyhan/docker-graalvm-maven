# https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions
name: Build

on:
  push:
    paths-ignore:
    - '**/*.md'
  schedule:
    # https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows
    - cron: '0 0 * * *'
  workflow_dispatch:
    # https://github.blog/changelog/2020-07-06-github-actions-manual-triggers-with-workflow_dispatch/

env:
  DOCKER_IMAGE_REPO: vegardit/graalvm-maven
  TRIVY_CACHE_DIR: ~/.trivy/cache
  
jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
        - GRAALVM_VERSION: latest
        - GRAALVM_VERSION: release

    steps:
    - name: Git Checkout
      uses: actions/checkout@v2 #https://github.com/actions/checkout

    - name: Cache trivy cache
      uses: actions/cache@v2
      with:
        path: ${{ env.TRIVY_CACHE_DIR }}
        # https://github.com/actions/cache/issues/342#issuecomment-673371329
        key: ${{ runner.os }}-trivy-${{ github.run_id }}
        restore-keys: |
          ${{ runner.os }}-trivy-

    - name: Cache local Maven repository
      uses: actions/cache@v2
      with:
        path: /tmp/maven-repo
        key: ${{ runner.os }}-mvnrepo-${{ hashFiles('example/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-mvnrepo-

    - name: Install dos2unix
      # using '-o Acquire::Retries=3' to workaround sporadic connectivity issues "Could not connect to azure.archive.ubuntu.com:80"
      # see https://github.com/actions/virtual-environments/issues/675
      run: sudo apt-get install --no-install-recommends -y dos2unix

    - name: Build ${{ env.DOCKER_IMAGE_REPO }}:${{ matrix.GRAALVM_VERSION }}
      shell: bash
      env:
        DOCKER_PUSH: 1
        DOCKER_REGISTRY: docker.io
        DOCKER_REGISTRY_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        DOCKER_REGISTRY_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
        MICROBADGER_TOKEN: ${{ secrets.MICROBADGER_TOKEN }}
        GRAALVM_VERSION: ${{ matrix.GRAALVM_VERSION }}
      run: |
        echo "$DOCKER_REGISTRY_TOKEN" | docker login -u="$DOCKER_REGISTRY_USERNAME" "$DOCKER_REGISTRY" --password-stdin
        bash build-image.sh
        curl -X POST https://hooks.microbadger.com/images/$DOCKER_REPO/$MICROBADGER_TOKEN || true;

    - name: Test ${{ env.DOCKER_IMAGE_REPO }}:${{ matrix.GRAALVM_VERSION }}
      shell: bash
      env:
        DOCKER_IMAGE: ${{ env.DOCKER_IMAGE_REPO }}:${{ matrix.GRAALVM_VERSION }}
      run: |
        bash example/tools/run-in-docker.sh mvn clean package
        bash example/tools/run-in-docker.sh bash -c target/example
